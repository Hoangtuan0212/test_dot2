import type { NextApiRequest, NextApiResponse } from "next";
import { getServerSession } from "next-auth/next";
import { Session } from "next-auth";
import { PrismaClient } from "@prisma/client";
import { authOptions } from "../auth/[...nextauth]";

// üëâ Kh·ªüi t·∫°o Prisma Client an to√†n cho c·∫£ Dev v√† Production
const globalForPrisma = global as unknown as { prisma: PrismaClient };
export const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    log: ["error", "warn"],
  });

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
declare module "next-auth" {
  interface Session {
    user?: {
      id?: string | null;
      name?: string | null;
      email?: string | null;
      image?: string | null;
    };
  }
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    console.log("=== [cartItemId].ts ===", req.method, req.query);

    // üß© Ki·ªÉm tra session
    const session = await getServerSession(req, res, authOptions);
    if (!session) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const userId = Number(session.user?.id);
    if (!userId) {
      return res.status(400).json({ message: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c userId" });
    }

    // üì¶ L·∫•y ID t·ª´ query
    const { cartItemId } = req.query;
    const parsedId = Array.isArray(cartItemId)
      ? parseInt(cartItemId[0], 10)
      : parseInt(cartItemId || "", 10);

    if (isNaN(parsedId)) {
      return res.status(400).json({ message: "cartItemId kh√¥ng h·ª£p l·ªá" });
    }

    // üßæ Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu CartItem
    const cartItem = await prisma.cartitem.findUnique({
      where: { id: parsedId },
      include: {
        cart: {
          select: { userId: true },
        },
      },
    });

    if (!cartItem) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng" });
    }

    if (cartItem.cart.userId !== userId) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn thao t√°c gi·ªè h√†ng n√†y" });
    }

    // üõ† X·ª≠ l√Ω PATCH (update quantity)
    if (req.method === "PATCH" || req.method === "PUT") {
      const qty = Number(req.body.quantity);
      if (isNaN(qty) || qty < 1) {
        return res.status(400).json({ message: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá" });
      }

      const updated = await prisma.cartitem.update({
        where: { id: parsedId },
        data: { quantity: qty },
      });

      return res.status(200).json({
        message: "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng",
        cartItem: updated,
      });
    }

    // üóë X·ª≠ l√Ω DELETE
    if (req.method === "DELETE") {
      await prisma.cartitem.delete({
        where: { id: parsedId },
      });

      return res.status(200).json({
        message: "ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng",
        deletedId: parsedId,
      });
    }

    // ‚ùå Method kh√¥ng h·ª£p l·ªá
    res.setHeader("Allow", ["PATCH", "PUT", "DELETE"]);
    return res.status(405).json({ message: `Method ${req.method} kh√¥ng ƒë∆∞·ª£c ph√©p` });
  } catch (error: any) {
    console.error("üî• L·ªói /api/cart/[cartItemId]:", error);
    return res.status(500).json({
      message: "L·ªói server kh√¥ng x√°c ƒë·ªãnh",
      error: error.message || error,
    });
  }
}
